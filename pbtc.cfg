; PBTC CONFIGURATION FILE
;
; The configuration file defines and configures a certain number of modules to
; be run by the application. In general, you should define at least one module
; per type, though some of them (like writers) are optional.
;
;
; [module]
;
; Defines the configuration for an anonymous module of the "module" type. There
; can only be one anonymous module per module type. The anonymous module, if
; present, is used as the default module for that module type.
;
;
; [module "name"]
;
; Defines the configuration for a named module of type "module", named "name".
; If no anonymous module has been defined, a random named module will be used as
; the default module for that type. Otherwise, named modules need to be
; explicitely referenced in a module configuration to be used.



[logger]

; console-enabled (bool)
;
; The console-enabled flag allows you to enable console logging by setting it
; to true or by simply not giving it a value.
;
; default: false

console-enabled=true


; console-format (string)
;
; The console-format option allows you to customize the output of the logger
; to the console. The following placeholders are available:
; %{id}        Sequence number for log message (uint64).
; %{pid}       Process id (int)
; %{time}      Time when log occurred (time.Time)
; %{level}     Log level (Level)
; %{module}    Module (string)
; %{program}   Basename of os.Args[0] (string)
; %{message}   Message (string)
; %{longfile}  Full file name and line number: /a/b/c/d.go:23
; %{shortfile} Final file name element and line number: d.go:23
; %{color}     ANSI color based on log level (use %{color:reset} to end)
;
; default: "%{message}"

console-format="%{color}%{time} %{level} %{shortfile} %{message}%{color:reset}"


; console-level (enum)
;
; The console-level option allows you to set the minimum level of a message
; in order to be included in the console log. The available levels are:
; CRITICAL
; ERROR
; WARNING
; NOTICE
; INFO
; DEBUG
;
; default: CRITICAL

console-level=INFO


; file-enabled (bool)
;
; The file-enabled flag allows you to enable logging to file.
;
; default: false

file-enabled=true

; file-format (string)
;
; The file-format option allows you to define the format of the messages logged
; to file. Please refer to the console format for details. Note that color
; codes won't work in most editors and will simply show up as weird characters.
;
; default: "%{message}"

file-format="%{time} %{level} %{shortfile} %{message}"


; file-level (enum)
;
; The file-level option allows you to set the minimum level for a message to be
; logged to the file. Please refer to the console level for a list of levels.
;
; default: CRITICAL

file-level=DEBUG


; file-path (string)
;
; The file-path option defines the path of the file to be used for logging. If
; the file already exists, it will be overwritten rather than appended to, so
; be careful to rotate the logs manually if needed.
;
; default=log

file-path=pbtc.log




[repository]

; log-level (enum)
;
; The log level setting can be used to increase or decrease the output sent to
; the backends (console, file) from this module. This means that it can
; effectively be used to decrease the output of a certain module. For instance,
; if you set this to CRITICAL and the console level is on INFO, only critical
; messages will be displayed for this module, while other modules will use
; the default. On the other hand, if this setting is INFO and the console level
; is on ERROR, you will still only get ERROR messages for this module, even
; though all at level INFO or higher will be forwarded to the backend.
;
; default: (empty)

log-level=DEBUG


; seeds-list (string)
;
; You can give a list of DNS seeds to be used for bootstrapping. Provide one
; seed URL per line. If no DNS seeds are provided and no nodes are known, the
; application will not be able to connect to the network.
;
; default: (empty)

seeds-list=seed.bitcoin.sipa.be
seeds-list=testnet-seed.bitcoin.petertodd.org


; seeds-port (int)
;
; If you provide a list of DNS seeds, use this option to indicate the default
; port to be used when connecting to IPs pulled from the seeds.
;
; default: 18333

seeds-port=8333


; backup-rate (int)
;
; The repository provides a mechanism to serialize and backup all node info
; to a file at regular intervals. The interval is in seconds. The default is
; zero, in which case no backups will be made.
;
; default: 3600

backup-rate=300


; backup-path (string)
;
; The back-up path indicates the location and name of the file. It can be given
; as relative or absolute path.
;
; default: dat

backup-path=nodes.dat

; node-limit (int)
;
; The node limit puts a limit on the maximum number of known nodes in the
; repository. This does *not* have anything to do with connections; it simply
; limits the number of node of which we track information in the repository,
; thus putting an upper limit on memory usage.
;
; default: 32768

node-limit=1048576



[tracker]

; log-level (enum)
;
; The log level setting can be used to increase or decrease the output sent to
; the backends (console, file) from this module. This means that it can
; effectively be used to decrease the output of a certain module. For instance,
; if you set this to CRITICAL and the console level is on INFO, only critical
; messages will be displayed for this module, while other modules will use
; the default. On the other hand, if this setting is INFO and the console level
; is on ERROR, you will still only get ERROR messages for this module, even
; though all at level INFO or higher will be forwarded to the backend.
;
; default: (empty)

log-level=DEBUG


[server]

; log-level (enum)
;
; The log level setting can be used to increase or decrease the output sent to
; the backends (console, file) from this module. This means that it can
; effectively be used to decrease the output of a certain module. For instance,
; if you set this to CRITICAL and the console level is on INFO, only critical
; messages will be displayed for this module, while other modules will use
; the default. On the other hand, if this setting is INFO and the console level
; is on ERROR, you will still only get ERROR messages for this module, even
; though all at level INFO or higher will be forwarded to the backend.
;
; default: (empty)

log-level=DEBUG


; address-list (string)
;
; The address list defines a list of IP addresses that we will listen on for
; incoming clients. You can define multiple IPs or the same IP with different
; ports by adding the entry multiple times.
;
; default: (empty)

address-list=127.0.0.1:8333
address-list=127.0.0.1:18333



[manager]

; log-level (enum)
;
; The log level setting can be used to increase or decrease the output sent to
; the backends (console, file) from this module. This means that it can
; effectively be used to decrease the output of a certain module. For instance,
; if you set this to CRITICAL and the console level is on INFO, only critical
; messages will be displayed for this module, while other modules will use
; the default. On the other hand, if this setting is INFO and the console level
; is on ERROR, you will still only get ERROR messages for this module, even
; though all at level INFO or higher will be forwarded to the backend.
;
; default: (empty)

log-level=DEBUG


; protocol-magic (int)
;
; The protocol magic bytes define the network to be used to communicate with
; peers. Next to the port, it is what differentiates the protocol of the Bitcoin
; TestNet and alternative crypto-currencies from that of the Bitcoin MainNet.
;
; default: 0x0709110b

protocol-magic=0xd9b4bef9


; protocol-version (int)
;
; The protocol version keeps track of what message types are supported by a peer
; and what the structure of the different messages is. It is sent during the
; protocol handshake to negotiate the highest shared version.
;
; default: 60000

protocol-version=70002


; connection-rate (int)
;
; The connection rate defines the maximum number of connections we try to
; establish per second.
;
; default: 8

connection-rate=32


; connection-limit (int)
;
; The connection limit specifies the maximum number of concurrent connections
; we keep in established or establishing state. It thus also puts a hard limit
; on the maximum number of peers that we communicate with at the same time.
;
; default: 64

connection-limit=1024



[processor]

; log-level (enum)
;
; The log level setting can be used to increase or decrease the output sent to
; the backends (console, file) from this module. This means that it can
; effectively be used to decrease the output of a certain module. For instance,
; if you set this to CRITICAL and the console level is on INFO, only critical
; messages will be displayed for this module, while other modules will use
; the default. On the other hand, if this setting is INFO and the console level
; is on ERROR, you will still only get ERROR messages for this module, even
; though all at level INFO or higher will be forwarded to the backend.
;
; default: (empty)

log-level=DEBUG