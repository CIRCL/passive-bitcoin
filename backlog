[PEER]

The pbtc peer package handles communication with one peer of the Bitcoin network. It will perform the handshake and make sure that the communication conforms to the Bitcoin protocol.

It does *not* implement anything beyond the basic connectivity. Instead, it advances relevant messages to handlers that can be used to implement advanced functionality.

As such, it is independent from our application logic and is part of the lowest layer. It shouldn't access anything above the domain layer.

TODO:
- handling of protocol conformity for received messages
- forwarding of messages to desired message handlers


[REPO]

The pbtc repo package keeps track of Bitcoin nodes and the information we have about them. It will score them and external handlers can request them according to various criteria.

The repository is not aware of the connection status for these nodes. Instead, it is timestamping the entries for various events to keep track of node quality.

The repository is also independent of our application logic and is to be used like an external library. It should not access anything above the domain layer.

TODO:
- persistency layer through database interface & adapter for mySQL (initial)
- blacklist, whitelist, bans & temporary suspends


[LOG]

The pbtc log package provides a logger interface and stub to the low level components of our system. As such it is also part of the domain layer and can be accessed by all other packages for logging purposes.

The actual logging functionality will be used through an external library. If the logging library fulfills our interface, we only need to do initialization in the infrastructure layer. Otherwise, we also need to add a wrapper on the adapter layer.

TODO:
- initialization of go-logging as our logger for the lower layers


[MANAGER]

The pbtc manager package implements the peer manager interface and is thus the place where most of our application logic is implemented. As such, it is of course part of the application layer.

It will create peers through the peer entity and create a repository through the repository layer.

TODO:
- configure local IPs & heuristic to choose best local IP to attempt connection
- limit outgoing port range for peers


[EVENT]

The pbtc event package implements a custom event logger that logs the desired Bitcoin network messages to a file in a binary format. It can be implemented on the application layer, or on both application layer and infrastructure/adapter for different back-ends.

TODO:
- everything


[MAIN]

The pbtc main package implements a simply shell that will accept some commands to admin the application. It's on the application layer and sets up the object graph as well.

TODO:
- add some commands